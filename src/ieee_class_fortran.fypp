#:mute

#! real kinds
#:set REAL_KINDS = ['real32', 'real64', 'real128']

#! ieee class
#:set IEEE_CLASSES = ['negative_inf', 'negative_zero', 'positive_inf', 'positive_zero', 'quiet_nan', 'signaling_nan']

#:endmute
module ieee_class_fortran


    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor


    use, intrinsic :: ieee_arithmetic, only: operator(.eq.)
    use, intrinsic :: ieee_arithmetic, only: ieee_class
    #:for IEEE_CLASS in IEEE_CLASSES
    use, intrinsic :: ieee_arithmetic, only: ieee_${IEEE_CLASS}$
    #:endfor
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    implicit none


    private
    public  :: is_ieee_either_zero
    #:for IEEE_CLASS in IEEE_CLASSES
    public  :: is_ieee_${IEEE_CLASS}$
    #:endfor
    #:for IEEE_CLASS in IEEE_CLASSES
    public  :: set_ieee_${IEEE_CLASS}$
    #:endfor


    !> Checks whether `x` is either `ieee_negative_zero` or `ieee_positive_zero`
    #:set INTERFACE_NAME = "is_ieee_either_zero"
    interface ${INTERFACE_NAME}$
    #:for REAL_KIND in REAL_KINDS
        module procedure :: ${INTERFACE_NAME}$_${REAL_KIND}$
    #:endfor
    end interface

    #:for IEEE_CLASS in IEEE_CLASSES

    !> Checks whether `x` is `ieee_${IEEE_CLASS}$`
    #:set INTERFACE_NAME = "is_ieee_" + IEEE_CLASS
    interface ${INTERFACE_NAME}$
    #:for REAL_KIND in REAL_KINDS
        module procedure :: ${INTERFACE_NAME}$_${REAL_KIND}$
    #:endfor
    end interface

    #:endfor
    #:for IEEE_CLASS in IEEE_CLASSES

    !> Substitute `ieee_${IEEE_CLASS}$` to `x` using `ieee_value`
    #:set INTERFACE_NAME = "set_ieee_" + IEEE_CLASS
    interface ${INTERFACE_NAME}$
    #:for REAL_KIND in REAL_KINDS
        module procedure :: ${INTERFACE_NAME}$_${REAL_KIND}$
    #:endfor
    end interface

    #:endfor

    contains

    #:for REAL_KIND in REAL_KINDS

    !> Checks whether `x` is either `ieee_negative_zero` or `ieee_positive_zero`
    logical pure elemental function is_ieee_either_zero_${REAL_KIND}$(x) result(status)

        real(${REAL_KIND}$), intent(in) :: x

        associate( ieee_class_x => ieee_class(x) )
            status =      (ieee_class_x .eq. ieee_negative_zero) &!
            &        .or. (ieee_class_x .eq. ieee_positive_zero)
        end associate

    end function

    #:endfor
    #:for IEEE_CLASS in IEEE_CLASSES

    #:for REAL_KIND in REAL_KINDS

    !> Checks whether `x` is `ieee_${IEEE_CLASS}$`
    logical pure elemental function is_ieee_${IEEE_CLASS}$_${REAL_KIND}$(x) result(status)

        real(${REAL_KIND}$), intent(in) :: x

        status = ieee_class(x) .eq. ieee_${IEEE_CLASS}$

    end function

    #:endfor

    #:endfor
    #:for IEEE_CLASS in IEEE_CLASSES

    #:for REAL_KIND in REAL_KINDS

    !> Substitute `ieee_${IEEE_CLASS}$` to `x` using `ieee_value`
    pure elemental subroutine set_ieee_${IEEE_CLASS}$_${REAL_KIND}$(x)

        real(${REAL_KIND}$), intent(inout) :: x

        x = ieee_value( x = x, class = ieee_${IEEE_CLASS}$ )

    end subroutine

    #:endfor

    #:endfor
end module ieee_class_fortran
