#:include "ieee_class_fortran_common.fypp"
#:set DESCRIPTION_IS_IEEE_EITHER_ZERO = '!> Checks whether `x` is either `ieee_negative_zero` or `ieee_positive_zero`'
#:mute

#:set DESCRIPTION_IS_IEEE_CLASS_TYPE_FORE = '    !> Checks whether `x` is '

#:def DESCRIPTION_IS_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    #:if IEEE_CLASS_TYPE != 'ieee_either_zero'
        #:set DESCRIPTION = DESCRIPTION_IS_IEEE_CLASS_TYPE_FORE + '`' + IEEE_CLASS_TYPE + '`'
    #:else
        #:set DESCRIPTION = DESCRIPTION_IS_IEEE_CLASS_TYPE_FORE + 'either `ieee_negative_zero` or `ieee_positive_zero`'
    #:endif
    $:DESCRIPTION
    #:del DESCRIPTION
#:enddef

#:def DESCRIPTION_SET_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    #:set DESCRIPTION = '    !> Substitutes `' + IEEE_CLASS_TYPE + '` to `x` using `ieee_value`'
    $:DESCRIPTION
    #:del DESCRIPTION
#:enddef

#:set REAL_KINDS_AND_CLASS = ['class'] + REAL_KINDS

#:endmute
module ieee_class_fortran


    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor


    use, intrinsic :: ieee_arithmetic, only: operator(.eq.)
    use, intrinsic :: ieee_arithmetic, only: ieee_class
    use, intrinsic :: ieee_arithmetic, only: ieee_class_type
    #:for IEEE_CLASS_TYPE in SET_IEEE_CLASS_TYPE
    use, intrinsic :: ieee_arithmetic, only: ${IEEE_CLASS_TYPE}$
    #:endfor
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    implicit none


    private
    #:for IEEE_CLASS_TYPE in IS_IEEE_CLASS_TYPE
    public  :: is_${IEEE_CLASS_TYPE}$
    #:endfor
    #:for IEEE_CLASS_TYPE in SET_IEEE_CLASS_TYPE
    public  :: set_${IEEE_CLASS_TYPE}$
    #:endfor

    #:for IEEE_CLASS_TYPE in IS_IEEE_CLASS_TYPE

    #:set INTERFACE_NAME = "is_" + IEEE_CLASS_TYPE
    $:DESCRIPTION_IS_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    interface ${INTERFACE_NAME}$
    #:for KIND in REAL_KINDS_AND_CLASS
        module procedure :: ${INTERFACE_NAME}$_${KIND}$
    #:endfor
    end interface
    #:del INTERFACE_NAME

    #:endfor
    #:for IEEE_CLASS_TYPE in SET_IEEE_CLASS_TYPE

    $:DESCRIPTION_SET_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    #:set INTERFACE_NAME = "set_" + IEEE_CLASS_TYPE
    interface ${INTERFACE_NAME}$
    #:for KIND in REAL_KINDS
        module procedure :: ${INTERFACE_NAME}$_${KIND}$
    #:endfor
    end interface
    #:del INTERFACE_NAME

    #:endfor

    contains
    #:for IEEE_CLASS_TYPE in IS_IEEE_CLASS_TYPE
    #:set INTERFACE_NAME = 'is_' + IEEE_CLASS_TYPE
    #:for KIND in REAL_KINDS_AND_CLASS


    $:DESCRIPTION_IS_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    logical pure elemental function ${INTERFACE_NAME}$_${KIND}$(x) result(status)
    #:if KIND != 'class'

        real(${KIND}$), intent(in) :: x

        status = ${INTERFACE_NAME}$( ieee_class(x) )

    #:else

        type(ieee_class_type), intent(in) :: x

        #:if IEEE_CLASS_TYPE != 'ieee_either_zero'
        status = x .eq. ${IEEE_CLASS_TYPE}$
        #:else
        status =      is_ieee_negative_zero(x) &!
        &        .or. is_ieee_positive_zero(x)
        #:endif

    #:endif
    end function
    #:endfor


    #:endfor
    #:for IEEE_CLASS_TYPE in SET_IEEE_CLASS_TYPE

    #:for KIND in REAL_KINDS

    $:DESCRIPTION_SET_IEEE_CLASS_TYPE(IEEE_CLASS_TYPE)
    pure elemental subroutine set_${IEEE_CLASS_TYPE}$_${KIND}$(x)

        real(${KIND}$), intent(inout) :: x

        x = ieee_value( x = x, class = ${IEEE_CLASS_TYPE}$ )

    end subroutine

    #:endfor

    #:endfor
end module ieee_class_fortran
