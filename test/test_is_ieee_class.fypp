#:include "test_common.fypp"
program check

    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor
    use, intrinsic :: iso_fortran_env, only: compiler_options
    use, intrinsic :: iso_fortran_env, only: compiler_version


    #:for CLASS in IEEE_CLASSES_ARG 
    use, intrinsic :: ieee_arithmetic, only: ${CLASS}$
    #:endfor
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    use, non_intrinsic :: ieee_class_fortran


    implicit none


    print * , compiler_version()
    print * , compiler_options()

    #:for IEEE_CLASS_TARGET in IS_IEEE_CLASS_TYPE
    call test_is_${IEEE_CLASS_TARGET}$
    #:endfor


    contains

    #:for IEEE_CLASS_TARGET in IS_IEEE_CLASS_TYPE


    #:set TEST_TARGET_FUNCTION_NAME = "is_" + IEEE_CLASS_TARGET
    #:set SUBROUTINE_NAME = "test_" + TEST_TARGET_FUNCTION_NAME
    subroutine ${SUBROUTINE_NAME}$()

        #:for KIND in REAL_KINDS
        #:for IEEE_CLASS_ARG in IEEE_CLASSES_ARG
        #:mute

            #:set FLAG = ""
            #:set ERR_MSG = "; NG; " + TEST_TARGET_FUNCTION_NAME + "(" + IEEE_CLASS_ARG + " as " + KIND + ") must be "

            #:if IEEE_CLASS_TARGET != "ieee_either_zero"

                #:if IEEE_CLASS_TARGET == IEEE_CLASS_ARG
                    #:set FLAG = ".not. "
                    #:set ERR_MSG = ERR_MSG + ".true."
                #:else
                    #:set ERR_MSG = ERR_MSG + ".false."
                #:endif

            #:else

                #:if (IEEE_CLASS_ARG == "ieee_negative_zero") or (IEEE_CLASS_ARG == "ieee_positive_zero")
                    #:set FLAG = ".not. "
                    #:set ERR_MSG = ERR_MSG + ".true."
                #:else
                    #:set ERR_MSG = ERR_MSG + ".false."
                #:endif

            #:endif

        #:endmute
        if ( ${FLAG}$${TEST_TARGET_FUNCTION_NAME}$( ieee_value( 0.0_${KIND}$ , ${IEEE_CLASS_ARG}$ ) ) ) then
            error stop '${ERR_MSG}$'
        end if

        #:endfor

        #:endfor

        print '(A)', 'OK: ${SUBROUTINE_NAME}$'

    end subroutine ${SUBROUTINE_NAME}$

    #:endfor
end program check
