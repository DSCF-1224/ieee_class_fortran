#:mute

#! real kinds
#:set REAL_KINDS = ['real32', 'real64', 'real128']

#! ieee class

#:set IEEE_CLASSES_TARGET = &
    [ &
        "ieee_negative_inf"  , &
        "ieee_negative_zero" , &
        "ieee_positive_zero" , &
        "ieee_positive_inf"    &
    ]

#:set IEEE_CLASSES_ARG = &
    [ &
        "ieee_signaling_nan"      , &
        "ieee_quiet_nan"          , &
        "ieee_negative_inf"       , &
        "ieee_negative_normal"    , &
        "ieee_negative_denormal"  , &
        "ieee_negative_subnormal" , &
        "ieee_negative_zero"      , &
        "ieee_positive_zero"      , &
        "ieee_positive_subnormal" , &
        "ieee_positive_denormal"  , &
        "ieee_positive_normal"    , &
        "ieee_positive_inf"         &
    ]

#:endmute
program check

    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor
    use, intrinsic :: iso_fortran_env, only: compiler_options
    use, intrinsic :: iso_fortran_env, only: compiler_version


    #:for CLASS in IEEE_CLASSES_ARG 
    use, intrinsic :: ieee_arithmetic, only: ${CLASS}$
    #:endfor
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    use, non_intrinsic :: ieee_class_fortran


    implicit none


    print * , compiler_version()
    print * , compiler_options()

    call test_is_ieee_negative_inf
    call test_is_ieee_negative_zero
    call test_is_ieee_positive_inf
    call test_is_ieee_positive_zero


    contains

    #:for IEEE_CLASS_TARGET in IEEE_CLASSES_TARGET


    #:set TEST_TARGET_FUNCTION_NAME = "is_" + IEEE_CLASS_TARGET
    #:set SUBROUTINE_NAME = "test_" + TEST_TARGET_FUNCTION_NAME
    subroutine ${SUBROUTINE_NAME}$()

        #:for KIND in REAL_KINDS
        #:for IEEE_CLASS_ARG in IEEE_CLASSES_ARG
        #:mute

            #:set FLAG = ""
            #:set ERR_MSG = "; NG; " + TEST_TARGET_FUNCTION_NAME + "(" + IEEE_CLASS_ARG + " as " + KIND + ") must be "

            #:if IEEE_CLASS_TARGET == IEEE_CLASS_ARG
                #:set FLAG = ".not. "
                #:set ERR_MSG = ERR_MSG + ".true."
            #:else
                #:set ERR_MSG = ERR_MSG + ".false."
            #:endif

        #:endmute
        if ( ${FLAG}$${TEST_TARGET_FUNCTION_NAME}$( ieee_value( 0.0_${KIND}$ , ${IEEE_CLASS_ARG}$ ) ) ) then
            error stop '${ERR_MSG}$'
        end if

        #:endfor

        #:endfor

        print '(A)', 'OK: ${SUBROUTINE_NAME}$'

    end subroutine ${SUBROUTINE_NAME}$

    #:endfor
end program check
