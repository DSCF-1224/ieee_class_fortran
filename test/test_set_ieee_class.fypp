#:include "test_common.fypp"
program check

    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor
    use, intrinsic :: iso_fortran_env, only: compiler_options
    use, intrinsic :: iso_fortran_env, only: compiler_version


    #:for CLASS in IEEE_CLASSES_ARG 
    use, intrinsic :: ieee_arithmetic, only: ${CLASS}$
    #:endfor
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    use, non_intrinsic :: ieee_class_fortran


    implicit none


    print * , compiler_version()
    print * , compiler_options()

    #:for IEEE_CLASS_TARGET in SET_IEEE_CLASS_TYPE
    #:if IEEE_CLASS_TARGET != "ieee_either_zero"
    call test_set_${IEEE_CLASS_TARGET}$
    #:endif
    #:endfor


    contains

    #:for IEEE_CLASS_TARGET in SET_IEEE_CLASS_TYPE
    #:if IEEE_CLASS_TARGET != "ieee_either_zero"


    #:set TEST_TARGET_SUBROUTINE_NAME = "set_" + IEEE_CLASS_TARGET
    #:set SUBROUTINE_NAME = "test_" + TEST_TARGET_SUBROUTINE_NAME
    subroutine ${SUBROUTINE_NAME}$()

        #:for KIND in REAL_KINDS
        real(${KIND}$) :: test_${KIND}$
        #:endfor


        #:for KIND in REAL_KINDS
        call ${TEST_TARGET_SUBROUTINE_NAME}$(test_${KIND}$)
        #:endfor


        #:for KIND in REAL_KINDS
        #:for IEEE_CLASS_ARG in IEEE_CLASSES_ARG
        #:mute

            #:set FLAG = ""
            #:set ERR_MSG = "; NG; result of " + TEST_TARGET_SUBROUTINE_NAME + "(test_" + KIND + ") must be "

            #:if IEEE_CLASS_TARGET == IEEE_CLASS_ARG
                #:set FLAG = ".not. "
                #:set ERR_MSG = ERR_MSG + ".true."
            #:else
                #:set ERR_MSG = ERR_MSG + ".false."
            #:endif

        #:endmute
        if ( ${FLAG}$is_${IEEE_CLASS_TARGET}$( ieee_value( test_${KIND}$ , ${IEEE_CLASS_ARG}$ ) ) ) then
            error stop '${ERR_MSG}$'
        end if

        #:endfor

        #:endfor

        print '(A)', 'OK: ${SUBROUTINE_NAME}$'

    end subroutine ${SUBROUTINE_NAME}$

    #:endif
    #:endfor
end program check
