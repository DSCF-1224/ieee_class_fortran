#:include 'test_common.fypp'
#:mute

    #:if MODE == 1
        #:set ITEM_SET_IEEE_X = 'ieee_negative_inf'
    #:elif MODE == 2
        #:set ITEM_SET_IEEE_X = 'ieee_negative_zero'
    #:elif MODE == 3
        #:set ITEM_SET_IEEE_X = 'ieee_positive_zero'
    #:elif MODE == 4
        #:set ITEM_SET_IEEE_X = 'ieee_positive_inf'
    #:elif MODE == 5
        #:set ITEM_SET_IEEE_X = 'ieee_quiet_nan'
    #:elif MODE == 6
        #:set ITEM_SET_IEEE_X = 'ieee_signaling_nan'
    #:else
        #:stop 'Unsupported mode is detected.'
    #:endif

    #:set TEST_TARGET_NAME = 'set_'  + ITEM_SET_IEEE_X
    #:set PROCEDURE_NAME   = 'test_' + TEST_TARGET_NAME
    #:set SUBMODULE_NAME   = 'imp_'  + PROCEDURE_NAME

#:endmute
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    #:for CLASS in (IEEE_CLASSES_ARG + ['ieee_value'])
    use, intrinsic :: ieee_arithmetic, only: ${CLASS}$
    #:endfor


    implicit none


    contains


    module procedure ${PROCEDURE_NAME}$

        #:for KIND in REAL_KINDS
        call ${PROCEDURE_NAME}$_${KIND}$
        #:endfor

        print *, 'OK: ${TEST_TARGET_NAME}$'

    end procedure ${PROCEDURE_NAME}$

    #:for KIND in REAL_KINDS

    #:set SUBROUTINE_NAME = PROCEDURE_NAME + '_' + KIND
    subroutine ${SUBROUTINE_NAME}$

        real(${KIND}$) :: test_value


        call ${TEST_TARGET_NAME}$(test_value)

        #:for ITEM_IS_IEEE_X in IS_IEEE_CLASS_TYPE
        #:mute

            #:set ERR_MSG_FORE = ' NG: is_' + ITEM_IS_IEEE_X + '(' + KIND + ' called ' + TEST_TARGET_NAME + ') must be '

            #:if ITEM_IS_IEEE_X != 'ieee_either_zero'

                #:if ITEM_SET_IEEE_X != ITEM_IS_IEEE_X
                    #:set FLAG   = ''
                    #:set ERRMSG = ERR_MSG_FORE + '.false.'
                #:else
                    #:set FLAG   = '.not.'
                    #:set ERRMSG = ERR_MSG_FORE + '.true.'
                #:endif

            #:else

                #:if (ITEM_SET_IEEE_X == 'ieee_negative_zero') or (ITEM_SET_IEEE_X == 'ieee_positive_zero')
                    #:set FLAG   = '.not.'
                    #:set ERRMSG = ERR_MSG_FORE + '.true.'
                #:else
                    #:set FLAG   = ''
                    #:set ERRMSG = ERR_MSG_FORE + '.false.'
                #:endif

            #:endif

        #:endmute
        if ( ${FLAG.ljust(5)}$ is_${ITEM_IS_IEEE_X.ljust(19)}$(test_value) ) error stop '${ERRMSG}$'
        #:endfor

    end subroutine ${SUBROUTINE_NAME}$

    #:endfor
end submodule ${SUBMODULE_NAME}$
