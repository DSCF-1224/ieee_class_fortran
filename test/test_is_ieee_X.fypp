#:include "test_common.fypp"
#:mute

    #:if MODE == 1
        #:set ITEM_IS_IEEE_X = "ieee_negative_inf"
    #:elif MODE == 2
        #:set ITEM_IS_IEEE_X = "ieee_negative_zero"
    #:elif MODE == 3
        #:set ITEM_IS_IEEE_X = "ieee_either_zero"
    #:elif MODE == 4
        #:set ITEM_IS_IEEE_X = "ieee_positive_zero"
    #:elif MODE == 5
        #:set ITEM_IS_IEEE_X = "ieee_positive_inf"
    #:elif MODE == 6
        #:set ITEM_IS_IEEE_X = "ieee_quiet_nan"
    #:elif MODE == 7
        #:set ITEM_IS_IEEE_X = "ieee_signaling_nan"
    #:else
        #:stop "Unsupported mode is detected."
    #:endif

    #:set TEST_TARGET_NAME = 'is_'   + ITEM_IS_IEEE_X
    #:set PROCEDURE_NAME   = 'test_' + TEST_TARGET_NAME
    #:set SUBMODULE_NAME   = 'imp_'  + PROCEDURE_NAME

#:endmute
submodule (${MODULE_NAME}$) ${SUBMODULE_NAME}$

    #:for CLASS in (IEEE_CLASSES_ARG + ['ieee_value'])
    use, intrinsic :: ieee_arithmetic, only: ${CLASS}$
    #:endfor


    implicit none


    contains


    module procedure ${PROCEDURE_NAME}$

        #:for KIND in REAL_KINDS
        call ${PROCEDURE_NAME}$_${KIND}$
        #:endfor

        print *, 'OK: ${TEST_TARGET_NAME}$'

    end procedure ${PROCEDURE_NAME}$

    #:for KIND in REAL_KINDS

    #:set SUBROUTINE_NAME = PROCEDURE_NAME + '_' + KIND
    subroutine ${SUBROUTINE_NAME}$
        #:for IEEE_CLASS_ARG in IEEE_CLASSES_ARG
        #:mute

            #:set FLAG = "      "
            #:set ERR_MSG = "; NG; " + TEST_TARGET_NAME + "(" + IEEE_CLASS_ARG + " as " + KIND + ") must be "

            #:if ITEM_IS_IEEE_X != "ieee_either_zero"

                #:if ITEM_IS_IEEE_X == IEEE_CLASS_ARG
                    #:set FLAG = ".not. "
                    #:set ERR_MSG = ERR_MSG + ".true."
                #:else
                    #:set ERR_MSG = ERR_MSG + ".false."
                #:endif

            #:else

                #:if (IEEE_CLASS_ARG == "ieee_negative_zero") or (IEEE_CLASS_ARG == "ieee_positive_zero")
                    #:set FLAG = ".not. "
                    #:set ERR_MSG = ERR_MSG + ".true."
                #:else
                    #:set ERR_MSG = ERR_MSG + ".false."
                #:endif

            #:endif

        #:endmute
        if ( ${FLAG}$${TEST_TARGET_NAME}$( ieee_value( 0.0_${KIND}$ , ${IEEE_CLASS_ARG.ljust(23)}$ ) ) ) error stop '${ERR_MSG}$'
        #:endfor
    end subroutine ${SUBROUTINE_NAME}$

    #:endfor
end submodule ${SUBMODULE_NAME}$
